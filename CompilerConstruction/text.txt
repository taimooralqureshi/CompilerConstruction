if(a):
	a=1
	if(a):
		break


if(a) : if(a) : pass
if(a) : while(a) : a = 1
if(a) : if(a) : pass
while(a) : if(a) : pass
if(a) : 
	break
	if(a) : 
		pass	
#[1,3]
#{k:v}

if(a) : return 1+c
if(a) : 1+c


1
0.5
a
True
"abc"


a = 1
a = a
a = "a"
a = "nl"
a = True
a = 67.78

a = []
a = [1]
a = [True]
a = ["hello"]
a = [0.24]
a = [[1]]
a = [ID]
a = [{k:v}]

a = [[],[[]],[[],[]]]
a = [1,2,3]
a = [True, False, True]
a = ["p","a","l"]
a = [ 0.14,0.4,4,0.5,0.5,48.2]
a = [a, b, c]
a = [a, 1, 5.5, True, [], '\n', "hello"]
a = [0.55,5.5,0.5,True,0.5,a]
a = [[1,2,3],[a,b,c],[2.5,3.5,5.5],[True,False],["a","b","c"],[1,"a",false,False,[]]]
a = [{},{k:v},{}]

a = {}
a = {key:value}
a = {0:2}
a = {0:True}
a = {0:ID}
a = {0:0.5}
a = {0:"hello"}
a = {0 : {0:1}}
a = {0:[5]}
a = {1:[a]}
a = {"key":"value"}
a = {1:{k:v},2:{k:v},2:{k:V}}
a = {a:{k:v},b:{0:1},c:{"a":"v"}}
a = {1:{1:2},a:{k:v},0.5:{5.5:5.4},True : {True: ad}}
a = {a :{a:{k:v}}}
a = {1:[[1,2,3],[a,b,c],[2.5,3.5,5.5],[True,False],["a","b","c"],[1,"a",false,False,[]]]}
#a = dict()

a = dict(dic)
a = dict({})
a = dict({key:value})

*a = 1
*_a = 1
*__a = 1
*__@a = 1
*__@$a = 1
*@a = 1
*@$a = 1
*$a = 1
_a = 1
_@a = 1
_@$a = 1
_$a = 1
__a = 1
__@a = 1
__@$a = 1
__$a = 1
@a = 1
@$a = 1
$a = 1

a+b
a-b
a*c
a/c
1+2
1.5-2.5
True*True
"s"/"v"
True+True
a+b+c
a*b*c
a-b-c
a/b/c
a+b*c
a*b-c
a-b/c
a/b+c
(1+2)
(1+0.5)
(True+False)
("s"+"s")
1+(1+2)
a+(b+c)
a*(c+v) 
a*v*(c+v)
a*(b+c)/2
1+(1+2)/2 
1+(1+2)/2 +(2+d)-2
((a+c)*a)
((1+2)*(c+v))
(a+(1+c)/2-(5+c)*x)
(a+b(c*c)*x)
(1+2)/2 + 1
(1+2)/2
(a+b)+c
(2+3)/(a+c)
(2+3)/(a+c)+(1+c)

a=b=1
a=b=0.5
a=b=c
a=b="s"
a=b=True
a=b=[]
a=b={}

a += 1
a -= 1
a += a*b
a += (a+b)
c += ("x"+"c")+"C"
c += (a+v)*(a+v)+1
a*=1
a*="c"
v /= a
v /= 0.5
a == b
3 == 5
3 != a
0.5 > 4
a < 2*s
3 >= a
b <= b
a*b != s+x
(a+v)>=(a+v)
(a+v)>=(a+v)*a
(a+v)>=a*(a+v)
(a+v)>=a*(a+v)*b
(a+v)+b>=(a+v)
b-(a+v)>=(a+v)
c/(a+v)-v>=x+(a+v)-x

Not a
Not True
Not a==b
Not (a==b)
Not 3 == 5
Not 3 != a
Not 0.5 > 4
Not a < 2*s
Not 3 >= a
Not b <= b
Not a*b != s+x
Not (a+v)>=(a+v)
Not (a+v)>=(a+v)*a
Not (a+v)>=a*(a+v)
Not (a+v)>=a*(a+v)*b
Not (a+v)+b>=(a+v)
Not b-(a+v)>=(a+v)
Not c/(a+v)-v>=x+(a+v)-x

Not a+b
Not a-b
Not a*c
Not a/c
Not 1+2
Not 1.5-2.5
Not True*True
Not "s"/"v"
Not True+True
Not a+b+c
Not a*b*c
Not a-b-c
Not a/b/c
Not a+b*c
Not a*b-c
Not a-b/c
Not a/b+c
Not (1+2)
Not (1+0.5)
Not (True+False)
Not ("s"+"s")
Not 1+(1+2)
Not a+(b+c)
Not a*(c+v) 
Not a*v*(c+v)
Not a*(b+c)/2
Not 1+(1+2)/2 
Not 1+(1+2)/2 +(2+d)-2
Not ((a+c)*a)
Not ((1+2)*(c+v))
Not (a+(1+c)/2-(5+c)*x)
Not (a+b(c*c)*x)
Not (1+2)/2 + 1
Not (1+2)/2
Not (a+b)+c
Not (2+3)/(a+c)
Not (2+3)/(a+c)+(1+c)

a()
a().a
a().a()
a().a().a
a().a[1]
a().a[1].a
a().a[1].a()
a(2).a().a[1]
a[a]
a[1]
a[1.5]
a[2].a
a[2][2]
a[2].ID().a
a[2].ID().a[2]
a.a
a.a.a
a.a[2]
a.a()
a.a.a()
a.a.a[3]
a.a(1,2,3,4)
a.a.a()
a.a.a[3]
a.a(1,2,3,4)
#a()[2]
a(1,3).a = 1
a().a[1] = "a"
a(2).a().a[1] = a
a(2).a().a[1] = 1+(1+2)/2 +(2+d)-2
a[a] = a
a[2].a = a
a[2][2] = a
a.a = a
a.a[2] = 1

this.a
this.a = 1
this.a = a
this.a = "a"
this.a = "nl"
this.a = True
this.a = 67.78
this.a = []
this.a = {}

this.a().a = 1
this.a(1,3).a = 1
this.a().a[1] = "a"
this.a(2).a().a[1] = a
this.a[a] = a
this.a[2].a = a
this.a[2][2] = a
this.a.a = a
this.a.a[2] = 1

a in [1,d,3]
if(a) : break
if(a) : continue
if(a) : return 1
if(a) : return 1.3
if(a) : return "a"
if(a) : return True
if(a) : return [1,4]
if(a) :  return {}
if(a) : a = 1
if(a) : 1+x
if(a) : a
if(a) : pass
if(a == b) : break
if(0.5 > 4) : break
if(1+(1+2)/2 +(2+d)-2) : break
if(a in a) : break
if(a) : return a
if(a) : return a()
if(a) : return a[3]
if(A):
	if(a):pass
if(A):
	a=1
	break
	continue
	return a



while(a) : break
while(a) : continue
while(a) : return 1
while(a) : return 1.3
while(a) : return "a"
while(a) : return True
while(a) : a = 1
while(a) : 1+x
while(a) : a
while(a) : pass
while(a == b) : break
while(0.5 > 4) : break
while(1+(1+2)/2 +(2+d)-2) : break
while(a in a) : break
while(A):
	a=1
	break
	continue
	return a
	while(A) :pass
for a in b: pass
for a in b(): pass
for a in a[2] : pass
for a in [2,2] : pass
for a in {} : pass
def int _myfun(int a):
	a = 1
def int _myfun(int a):
	break

def ID _myfun(ID a):
	break


class A():
	pass
class A(ID):
	pass
class A(ID,ID):
	pass
class A(ID,ID):
	pass
class A(ID,ID):
	a = 1
class A(ID,ID):
	def A():
		a = b
class A(ID,ID):
	a = 1
	b = 2
	def A():
		a = 1
	def A(int b):
		a = b
	def int myA():
		return this.a
class A():
	def A():
		this.a+=1
	def get():
		this.a += a+1

#if(a += a):pass

ac in a

if(this.ID()*a in a):pass

a += b

##this.ID()
this.ID().a
this.ID = a()
this.ID().a = a[1]
this.ID().a = []
##
for f in abc :
	   if(a) :
		  return c


a = 1+a
_a = q/2
__a = a*2
_$e=3.14
__$d = "depth"

for f in abc :
	   if(a) :
		  return a+2


 #  --not working (id_rel)


a().b[1].a = 1

a[a] = 1

a.b[2].c()

c().b.c[a]=0



#  --working

#=a.b()-r* (a in b)-p
p = a.b()-r* (a in b)-p
a=b=a.b().c[a+b].f().b=a.b()-r* (a in b)-p


_a[1]=b=c=0

if(a) :
	del c
else:
	del c

try : del abc
except ( exception abc ) : del abc
finally : del abc

def int __$abc ( int a, int *b ) : 
	del abc
	__a=b+c*2/5

for f in abc :
	   if(a) :
		  return c

class box(aa,bb):
	__a=1
	def _cons ( int a, int *d ) : del a

class box(aa,bb):
	__a=1
	__a=b+c*2/5
	def int __$abc ( int a, int *b ) : 
		del abc

class box(aa,bb):
	__a=1
	_a=new a()
	def int __$abc ( int a, int *b ) : 
		del abc
		__a=1
		__a=b+c*2/5
		if(a) :
			del c
	__a=1
	__a=b+c*2/5

__a=1
__a=b+c*2/5

_a=new a()

if(a*2 == 0):
	del a

if(a.b().c[a+b].f().b==a.b().c[a+b].f().b*4):
	return true

